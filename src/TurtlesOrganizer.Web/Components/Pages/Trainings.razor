@page "/trainings"
@using TurtlesOrganizer.Application.DTOs
@using TurtlesOrganizer.Application.Services
@inject ITrainingService TrainingService
@inject NavigationManager Navigation

<PageTitle>Trainings</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Trainings</h2>
        <a href="/trainings/create" class="btn btn-primary">Create Training</a>
    </div>

    @if (trainings == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!trainings.Any())
    {
        <div class="alert alert-info">
            No trainings available. Create your first training!
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var training in trainings)
            {
                <div class="col-md-6 mb-3">
                    <div class="card">
                        <div class="card-header">
                            <h5>@training.Topic</h5>
                        </div>
                        <div class="card-body">
                            @if (!string.IsNullOrEmpty(training.Description))
                            {
                                <p class="card-text">@training.Description</p>
                            }
                            <p class="text-muted">Created: @training.CreatedAt.ToString("yyyy-MM-dd")</p>
                            <a href="/trainings/@training.Id" class="btn btn-primary">View Details</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private IEnumerable<TrainingDto>? trainings;

    protected override async Task OnInitializedAsync()
    {
        trainings = await TrainingService.GetAllTrainingsAsync();
    }
}
