@page "/login"
@using TurtlesOrganizer.Application.DTOs
@using TurtlesOrganizer.Application.Services
@inject IAuthService AuthService
@inject ICookieAuthenticationService CookieAuth
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Login</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">@successMessage</div>
                    }

                    <EditForm Model="@model" OnValidSubmit="HandleLogin" FormName="LoginForm">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="model.Email" type="email" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText @bind-Value="model.Password" type="password" class="form-control" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <button type="submit" class="btn btn-primary w-100">Login</button>
                    </EditForm>

                    <div class="mt-3 text-center">
                        <a href="/register">Don't have an account? Register</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel model { get; set; } = new();
    
    private string? errorMessage;
    private string? successMessage;

    private async Task HandleLogin()
    {
        try
        {
            var dto = new LoginDto(model.Email, model.Password);
            var user = await AuthService.LoginAsync(dto);
            
            if (user == null)
            {
                errorMessage = "Invalid email or password";
                successMessage = null;
                return;
            }

            // Set authentication cookie
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext != null)
            {
                await CookieAuth.SignInAsync(httpContext, user.Id, user.Email, user.FullName);
            }
            
            successMessage = $"Welcome back, {user.FullName}!";
            errorMessage = null;
            
            // Clear form
            model = new();
            
            // Redirect using Response.Redirect for proper authentication cookie handling
            if (httpContext != null)
            {
                httpContext.Response.Redirect("/trainings", false);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            successMessage = null;
        }
    }

    private class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}
