@page "/sessions/{SessionId:guid}/register"
@using TurtlesOrganizer.Application.DTOs
@using TurtlesOrganizer.Application.Services
@inject ITrainingSessionService SessionService
@inject IPersonService PersonService
@inject NavigationManager Navigation

<PageTitle>Register for Session</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Register as Attendee</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@model" OnValidSubmit="HandleRegister" FormName="RegisterAttendeeForm">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label">Select Attendee</label>
                            <InputSelect @bind-Value="model.PersonId" class="form-control">
                                <option value="">Select Person</option>
                                @if (persons != null)
                                {
                                    @foreach (var person in persons)
                                    {
                                        <option value="@person.Id">@person.FullName (@person.Email)</option>
                                    }
                                }
                            </InputSelect>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success">@successMessage</div>
                        }

                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary">Register</button>
                            <a href="/trainings" class="btn btn-secondary">Cancel</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid SessionId { get; set; }

    [SupplyParameterFromForm]
    private RegisterModel model { get; set; } = new();
    
    private IEnumerable<PersonDto>? persons;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        persons = await PersonService.GetAllPersonsAsync();
    }

    private async Task HandleRegister()
    {
        try
        {
            await SessionService.RegisterAttendeeAsync(SessionId, Guid.Parse(model.PersonId));
            successMessage = "Successfully registered for the session!";
            errorMessage = null;
            
            // Clear form
            model = new();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            successMessage = null;
        }
    }

    private class RegisterModel
    {
        public string PersonId { get; set; } = "";
    }
}
