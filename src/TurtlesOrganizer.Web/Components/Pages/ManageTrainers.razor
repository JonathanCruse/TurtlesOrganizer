@page "/admin/manage-trainers"
@using TurtlesOrganizer.Application.DTOs
@using TurtlesOrganizer.Application.Services
@using TurtlesOrganizer.Domain.Repositories
@inject IPersonService PersonService
@inject IPersonRepository PersonRepository

<PageTitle>Manage Trainers</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h3>Manage Trainers</h3>
                    <p class="text-muted mb-0">Mark persons who can be trainers</p>
                </div>
                <div class="card-body">
                    @if (persons == null)
                    {
                        <p>Loading...</p>
                    }
                    else if (!persons.Any())
                    {
                        <div class="alert alert-info">
                            No persons found. Create persons first.
                        </div>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success alert-dismissible fade show">
                                @successMessage
                                <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show">
                                @errorMessage
                                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                            </div>
                        }

                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Member Status</th>
                                        <th>Trainer Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var person in persons)
                                    {
                                        <tr>
                                            <td>@person.FullName</td>
                                            <td>@person.Email</td>
                                            <td>
                                                @if (person.IsMember)
                                                {
                                                    <span class="badge bg-success">Member</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Guest</span>
                                                }
                                            </td>
                                            <td>
                                                @if (person.IsTrainer)
                                                {
                                                    <span class="badge bg-primary">âœ“ Trainer</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-light text-dark">Not Trainer</span>
                                                }
                                            </td>
                                            <td>
                                                @if (person.IsTrainer)
                                                {
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => ToggleTrainerStatus(person.Id, false)">
                                                        Remove Trainer
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-sm btn-primary" 
                                                            @onclick="() => ToggleTrainerStatus(person.Id, true)">
                                                        Make Trainer
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="mt-3">
                            <p class="text-muted">
                                <strong>Trainers:</strong> @persons.Count(p => p.IsTrainer) of @persons.Count() persons
                            </p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<PersonDto>? persons;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadPersons();
    }

    private async Task LoadPersons()
    {
        persons = await PersonService.GetAllPersonsAsync();
    }

    private async Task ToggleTrainerStatus(Guid personId, bool isTrainer)
    {
        try
        {
            var person = await PersonRepository.GetByIdAsync(personId);
            if (person == null)
            {
                errorMessage = "Person not found";
                return;
            }

            person.SetTrainerStatus(isTrainer);
            await PersonRepository.UpdateAsync(person);

            successMessage = isTrainer 
                ? $"{person.FullName} is now a trainer!" 
                : $"{person.FullName} is no longer a trainer.";
            errorMessage = null;

            // Reload the list
            await LoadPersons();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            successMessage = null;
        }
    }
}
